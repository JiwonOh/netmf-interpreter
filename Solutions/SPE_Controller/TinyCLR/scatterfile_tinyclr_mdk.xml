<?xml version="1.0"?>
<ScatterFile xmlns="http://schemas.microsoft.com/netmf/ScatterfileSchema.xsd">

  <!-- STM32F4 with 2M Flash, 192KB SRAM, and 64k DATA CCM -->

  <Set Name="Valid" Value="false"/>

  <!-- ################################################################################ -->
  <!-- Memory Region base and size values for physical hardware to help clarify the mapping
         by making Symbolic names available instead of a bunch of numbers. These values are
         fixed in hardware and therefore, don't change.
    -->
  <!-- Internal FLASH -->
  <Set Name="IFLASH_BaseAddress"      Value="0x08000000"/>
  <Set Name="IFLASH_Size"             Value="0x00200000"/>
  <!-- 2MB -->

  <!-- Core Coupled Memory (CCM) [D-Bus] -->
  <Set Name="CCM_BaseAddress"         Value="0x10000000"/>
  <Set Name="CCM_Size"                Value="0x00010000"/>
  <!-- 64KB -->

  <!-- Internal SRAM -->
  <Set Name="IRAM_BaseAddress"        Value="0x20000000"/>
  <Set Name="IRAM_Size"               Value="0x00030000"/>
  <!-- 192KB -->

  <!-- External SRAM -->
  <Set Name="EXTRAM_BaseAddress"      Value="0xD0000000"/>
  <Set Name="EXTRAM_Size"             Value="0x00800000"/>
  <!-- 8MB -->

  <!-- Solution/Project specific usage settings -->
  <!-- Internal CCM (D-Bus) -->
  <!-- Put Stack in CCM for high speed access, reducing overhead of stack usage -->
  <Set Name="Stack_Bottom"            Value="%CCM_BaseAddress%"/>

  <!-- External SRAM -->
  <Set Name="Heap_BaseAddress"        Value="%EXTRAM_BaseAddress%"/>

  <Set Name="CustomHeap_Size" Value="0x1000"/>
  <Set Name="Heap_Size"       Value="%EXTRAM_Size% - %CustomHeap_Size%"/>

  <!-- Internal FLASH -->
  <!-- TinyBooter sits at power on Reset vector -->
  <Set Name="BooterCode_BaseAddress"  Value="%IFLASH_BaseAddress%"/>
  <Set Name="BooterCode_Size"         Value="0x0000C000"/>
  <!-- 48KB -->

  <!-- Configuration section -->
  <Set Name="Config_BaseAddress"      Value="%BooterCode_BaseAddress% + %BooterCode_Size%"/>
  <Set Name="Config_Size"             Value="0x00004000"/>
  <!-- 16KB -->

  <!-- Native Code section -->
  <Set Name="Code_BaseAddress"    Value="%Config_BaseAddress% + %Config_Size%"/>
  <Set Name="Code_Size"           Value="0x000F0000"/>
  <!-- 512KB+256KB+192KB -->

  <!-- Deployment fills the rest of flash... -->
  <!-- 1MB -->

  <If Name="TARGETLOCATION" Value="FLASH">
    <Set Name="Valid"           Value="true"/>
  </If>


  <!-- ################################################################################ -->
  <If Name="Valid" Value="false">
    <Error Message="Configuration not recognized"/>
  </If>

  <LoadRegion Name="LR_%TARGETLOCATION%" Base="%Code_BaseAddress%" Options="ABSOLUTE" Size="%Code_Size%">

    <!-- ========= INTERNAL FLASH ============================================ -->
    <ExecRegion Name="ER_%TARGETLOCATION%" Base="%Code_BaseAddress%" Options="FIXED" Size="">
      <FileMapping Name="AppEntry.obj" Options="(+RO, +FIRST)" />
      <FileMapping Name="*" Options="(SectionForBootstrapOperations)" />
      <FileMapping Name="*" Options="(+RO-CODE)" />
      <FileMapping Name="*" Options="(+RO-DATA)" />
    </ExecRegion>

    <!-- ========= INTERNAL RAM ============================================= -->
    <!-- Writeable Vector table -->
    <!-- NOTE:
             Despite what you might hope for, this CANNOT go into the CCM area as the NVIC does not
             have access to that space (it sees the AHB layer and below, rather than the core's D-Bus)
        -->
    <!-- Alignment for the vector table is important to allow the NVIC to decode the proper locations
            (See Section 4.4.4 of the ARM Cortex-M4 Generic User Guide [ ARM DUI 0553A (ID121610) ] )
            Since this starts the SRAM block, it's aligned just fine for any size table.
        -->
    <ExecRegion Name="ER_VECTORS" Base="%IRAM_BaseAddress%" Options="ABSOLUTE NOCOMPRESS" Size="">
      <FileMapping Name="*" Options="(VectorTable +FIRST)" />
    </ExecRegion>

    <ExecRegion Name="ER_RAM_RW" Base="+0" Options="ABSOLUTE NOCOMPRESS" Size="">
      <FileMapping Name="*" Options="(+RW-DATA, +ZI)" />
    </ExecRegion>

    <!-- To enable re-initialization of the LWIP stack, which has no built-in support
             for re-init, all RW and ZI data for the stack is placed into an isolated region
             and the HAL soft reboot code handles re-initializing the data in this region.
        -->
    <ExecRegion Name="ER_LWIP_OS" Base="+0" Options="ABSOLUTE NOCOMPRESS" Size="">
      <FileMapping Name="*sockets_hal_*_LWIP_os.lib" Options="(+RW-DATA +ZI)" />
      <FileMapping Name="*lwip_1_4_1_os_CMSIS_RTOS.lib" Options="(+RW-DATA +ZI)" />
    </ExecRegion>

    <ExecRegion Name="ER_RAM_RO" Base="+0" Options="ABSOLUTE NOCOMPRESS" Size="">
      <!-- Flash programming from Flash is safe on STM32 -->
      <!-- No need to place Flash programming code in RAM -->
      <!-- <FileMapping Name="*" Options="(SectionForFlashOperations)" /> -->
    </ExecRegion>

    <!-- ========= EXTERNAL RAM ============================================= -->
    <ExecRegion Name="ER_HEAP_BEGIN" Base="%Heap_BaseAddress%" Options="ABSOLUTE UNINIT" Size="">
      <FileMapping Name="*" Options="(SectionForHeapBegin)" />
    </ExecRegion>

    <!-- everything between heapbegin and heapend will be allocated for a heap -->

    <ExecRegion Name="ER_HEAP_END" Base="+%Heap_Size%" Options="ABSOLUTE UNINIT" Size="">
      <FileMapping Name="*" Options="(SectionForHeapEnd)" />
    </ExecRegion>

    <ExecRegion Name="ER_CUSTOM_HEAP_BEGIN" Base="+0" Options="ABSOLUTE UNINIT" Size="">
      <FileMapping Name="*" Options="(SectionForCustomHeapBegin)" />
    </ExecRegion>

    <!-- everything between heapbegin and heapend will be allocated for the unmanaged SimpleHeap -->

    <ExecRegion Name="ER_CUSTOM_HEAP_END" Base="+%CustomHeap_Size%" Options="ABSOLUTE UNINIT" Size="">
      <FileMapping Name="*" Options="(SectionForCustomHeapEnd)" />
    </ExecRegion>

    <!-- ========= Internal CCM ============================================ -->
    <!-- Stack allocation pools for the OS, Sizes are set in RTX_Conf_CM.c along with other OS configuration -->
    <ExecRegion Name="ER_RT_STACK" Base="%Stack_Bottom%" Options="ABSOLUTE UNINIT" Size="">
      <FileMapping Name="*" Options="(rtx_stack)" />
    </ExecRegion>

    <!-- The rest of the CCM is used as a general stack during startup. This can't overlap with the ER_RT_STACK
             region as the kernel will zero that out during initialization, which would overwrite the stack of the
             code running the initialization, causing an early FAULT. Size and alignment are critical here. The stack
             must be aligned on an 8 byte boundary AND the size of this region must not extend it past the end of the
             actual physical CCM space. The CRT startup code will initialize the region and, if the aligned size
             puts the end outside of physical memory it will generate an imprecise abort.
        -->
    <ExecRegion Name="ER_STACK_BOTTOM" Base="AlignExpr( +0, 8 )" Options="ABSOLUTE UNINIT" Size="">
      <FileMapping Name="*" Options="(SectionForStackBottom)" />
    </ExecRegion>
    <ExecRegion Name="ER_STACK" Base="+0" Options="ABSOLUTE EMPTY" Size="(AlignExpr(%CCM_Size% - 8 - ImageLength(ER_RT_STACK), 8))" />
    <ExecRegion Name="ER_STACK_TOP" Base="+0" Options="ABSOLUTE UNINIT" Size="">
      <FileMapping Name="*" Options="(SectionForStackTop +LAST)" />
    </ExecRegion>
  </LoadRegion>

  <!--<LoadRegion Name="LR_DAT" Base="%Data_BaseAddress%" Options="ABSOLUTE" Size="%Data_Size%">
    <ExecRegion Name="ER_DAT" Base="%Data_BaseAddress%" Options="FIXED" Size="%Data_Size%">
      <FileMapping Name="tinyclr_dat.obj" Options="(+RO)" />
    </ExecRegion>
  </LoadRegion>-->

  <LoadRegion Name="LR_CONFIG" Base="%Config_BaseAddress%" Options="ABSOLUTE" Size="%Config_Size%">
    <ExecRegion Name="ER_CONFIG" Base="%Config_BaseAddress%" Options="FIXED" Size="%Config_Size%">
      <FileMapping Name="*" Options="(SectionForConfig)" />
    </ExecRegion>
  </LoadRegion>
</ScatterFile>

