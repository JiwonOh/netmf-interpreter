//-----------------------------------------------------------------------------
//
//    ** DO NOT EDIT THIS FILE! **
//    This file was generated by a tool
//    re-running the tool will overwrite this file.
//
//-----------------------------------------------------------------------------


#ifndef _SPE_HARDWARE_H_
#define _SPE_HARDWARE_H_

#include <TinyCLR_Interop.h>
struct Library_Spe_Hardware_Spe_Hardware_NativeRTC
{
    TINYCLR_NATIVE_DECLARE(get_IsInitialized___STATIC__BOOLEAN);
    TINYCLR_NATIVE_DECLARE(Native_GetTime___STATIC__VOID__BYREF_I4__BYREF_I4__BYREF_I4__BYREF_I4__BYREF_I4__BYREF_I4);
    TINYCLR_NATIVE_DECLARE(Native_SetTime___STATIC__VOID__I4__I4__I4__I4__I4__I4);
    TINYCLR_NATIVE_DECLARE(Native_Initialize___STATIC__BOOLEAN__SpeHardwareNativeRTCRTCCLKSource__U4);
    TINYCLR_NATIVE_DECLARE(Native_Uninitialize___STATIC__VOID);
    TINYCLR_NATIVE_DECLARE(Native_SetDayLightSaving___STATIC__VOID__SpeHardwareNativeRTCRTCDayLightSaving__SpeHardwareNativeRTCRTCStoreOperation);
    TINYCLR_NATIVE_DECLARE(Native_SetCoarseCalibration___STATIC__VOID__SpeHardwareNativeRTCRTCCalibSign__U4);
    TINYCLR_NATIVE_DECLARE(Native_SetCoarseCalibrationState___STATIC__VOID__BOOLEAN);
    TINYCLR_NATIVE_DECLARE(Native_SetSmoothCalibration___STATIC__VOID__SpeHardwareNativeRTCRTCSmoothCalibPeriod__SpeHardwareNativeRTCRTCSmoothCalibPlusPulses__U4);

    //--//

};

struct Library_Spe_Hardware_Spe_Hardware_NativeADC
{
    static const int FIELD_STATIC__AveragecountPerSample = 0;

    static const int FIELD__channel = 1;
    static const int FIELD__scale = 2;
    static const int FIELD__offset = 3;

    TINYCLR_NATIVE_DECLARE(NativeADCInitialize___VOID__I4);
    TINYCLR_NATIVE_DECLARE(NativeADCRead___VOID__I4__I4__I4__I4__SZARRAY_U2);
    TINYCLR_NATIVE_DECLARE(NativeADCRead___I4__I4__I4);
    TINYCLR_NATIVE_DECLARE(NativeADCReadMinMax___VOID__I4__I4__I4__I4__SZARRAY_U2__BYREF_U2__BYREF_U2);
    TINYCLR_NATIVE_DECLARE(NativeADCReadSquareSum___I4__I4__I4__I4__I4__SZARRAY_U4);

    //--//

};

struct Library_Spe_Hardware_Spe_Hardware_NativeSerialPort
{
    static const int FIELD__baudRate = 1;
    static const int FIELD__portName = 2;

    TINYCLR_NATIVE_DECLARE(NativeSerialComm_Open___VOID__U1__I4);
    TINYCLR_NATIVE_DECLARE(NativeSerialComm_Close___VOID__U1);
    TINYCLR_NATIVE_DECLARE(NativeSerialComm_Write___VOID__U1__SZARRAY_U1__I4__I4);
    TINYCLR_NATIVE_DECLARE(NativeSerialComm_Read___I4__U1__SZARRAY_U1__I4__I4);
    TINYCLR_NATIVE_DECLARE(NativeSerialComm_WriteAndRead___I4__U1__SZARRAY_U1__I4__I4__SZARRAY_U1__I4__I4);

    //--//

};



extern const CLR_RT_NativeAssemblyData g_CLR_AssemblyNative_Spe_Hardware;

#endif  //_SPE_HARDWARE_H_
